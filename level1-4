#include<iostream>
#include<string>
#include<fstream>
#include<sstream>
#include<string.h>
#include<vector>
#include<stack>
using namespace std;
void TakeKeywords(string s);//Get keywords and filter 
void Calculate1a2(string a[]);
void Calculate3a4(); 
void output(int Level);
string key_word[32] = {
	"auto","break","case","char","const","continue","default","double",
	"do","else","enum","extern","float","for","goto","if","int","long",
	"register","return","short","signed","sizeof","static","struct",
	"switch","typedef","union","unsigned","void","volatile","while"};
int keyword_num = 0;
int switch_num = 0;
int ifelse_num = 0;
int case_num[500] = {0};//Collect the number of cases corresponding to each switch 
int case_cnt = 0; 
int iee_num = 0;    //if-else-else count 
int ie_num = 0;     //if-else count
int top = -1;        //As the top of the back stack 
string temp1[1000];//Store the obtained string
string temp2[1000];//Store filtered strings, even keywords 
int cnt1 = 0;        // temp1 count
int cnt2 = 0;        // temp2 count
vector <string> iee; //store{,},and if,elseif,else 

int main()
{
	int level;
	string filename,temp;
	char buffer[1];
	cout<<"file address:";	
	cin>>filename;	
	ifstream fin(filename.c_str());   
	if ( ! fin)
	{
		cout << "file can not open" <<endl;
	}
	else
	{
		while (getline(fin,temp))
		{           // Input from disk file, read in line by line, and process line by line
			TakeKeywords(temp);			  
		}
		fin.close();    // Close the file input stream
	}
	Calculate1a2(temp1);    // Pass in all the English words obtained for the first time, filter the keywords and calculate the results of level1 and 2
	Calculate3a4();         //get level3,4 result 
	cout<<"input level:";
	cin>>level;
	output(level);
}

void TakeKeywords(string s)
{
	int n = s.length();
	string str;
	int flag = 0;              //Determines whether non-alphabetic characters are '{' or '}', marking
	const char* p = s.data();  //let string change char *[] 
	for(int i = 0;i <= n;i++)    //Each character is processed and judged
	{
		if(p[i] == '{')
		{
			flag=1;
		}
		if(p[i] == '}')
		{
			flag=2;
		}		
		if((p[i] >= 'a'&&p[i] <= 'z'||p[i] >= 'A'&&p[i] <= 'Z'))
		{
			str += p[i];  //If they are consecutive, the characters are concatenated 
		}
		else 
		{
			if(str == "")//No letter is encountered, but it is possible to encounter parentheses, judge, if there is a press iee
			{
				if(flag == 1)iee.push_back("{");
				if(flag == 2)iee.push_back("}");
				flag = 0;
				continue;
			}
			temp1[cnt1++] = str;  
			if(str == "else")       //if we find the else, it's an else if if it is, then it must be an if after n Spaces
			{
				int j = i;
				while(p[j] == ' '&& j <= n)j++;  // Remove the space between the else and if
				if(p[j] == 'i'&&p[j+1] == 'f')
				{
					iee.push_back("else_if");
					i = j+2;
					keyword_num++;
				}
				else iee.push_back("else");
				
			}
			if(str == "if")                   //  if you find the if, if the previous one is else, if it's not, then you press the if in
			{
				
				if(iee.back() != "else")iee.push_back("if");
			}
			if(flag == 1)iee.push_back("{");
			if(flag == 2)iee.push_back("}");
			flag = 0;
			str = "";
			continue;
		}
	}
}

void Calculate1a2(string a[])
{
	int i,j;
	for(i = 0;i < cnt1;i++)
	{
		for(j = 0;j <= 31;j++)//Decide if the word is the keyword you want
		{
			if(a[i] == key_word[j])
			{
				keyword_num++;       //Statistical key words
				temp2[cnt2++] = a[i];  //Transfer the keywords to temp2 for secondary filtering
			}
		}
		if(a[i] == "switch")
		{ 
			switch_num++;
			case_cnt++; 
		}
		if(a[i] == "case")
		{
			case_num[case_cnt]++;
		}
	}
}

void Calculate3a4() 
{
	stack <string> s;  
	stack <int> have_elseif; 
	for (int i = 0;i < iee.size();i++) 
	{
		if (iee[i] == "{") 
		{
			s.push("{");
			have_elseif.push(0);
		}
		else if (iee[i] == "}") 
		{  
			while (s.top() != "{") 
			{
				s.pop();
			}
			s.pop();
			have_elseif.pop();
		}
		else if (iee[i] == "if") 
		{  
			s.push("if");
			have_elseif.pop();
			have_elseif.push(0);
		}
		else if (iee[i] == "else_if") 
		{
			have_elseif.pop();
			have_elseif.push(1);
		}
		else if (iee[i] == "else") 
		{  
			if (have_elseif.top()) 
			{
				iee_num++;
			}
			else 
			{
				ie_num++;
			}
			have_elseif.pop();
			have_elseif.push(0);
			while (s.top() != "if") 
			{ 
				s.pop();
			}
			s.pop();
		}
	}
}
void output(int Level)
{
	if(Level == 1)
	{
		cout<<"total num: "<<keyword_num<<endl;
	}
	if(Level == 2)
	{
		cout<<"total num: "<<keyword_num<<endl;
		cout<<"switch num: "<<switch_num<<endl;
		cout<<"case num: ";
		for(int i = 1;i <= case_cnt;i++)
		{
			cout<<case_num[i]<<" ";
		}
		cout<<endl;
	}
	if(Level == 3)
	{
		cout<<"total num: "<<keyword_num<<endl;
		cout<<"switch num: "<<switch_num<<endl;
		cout<<"case num: ";
		for(int i = 1;i <= case_cnt;i++)
		{
			cout<<case_num[i]<<" ";
		}
		cout<<endl;
		cout<<"if-else num: "<<ie_num<<endl;
	}
	if(Level == 4)
	{
		cout<<"total num: "<<keyword_num<<endl;
		cout<<"switch num: "<<switch_num<<endl;
		cout<<"case num: ";
		for(int i = 1;i <= case_cnt;i++)
		{
			cout<<case_num[i]<<" ";
		}
		cout<<endl;
		cout<<"if-else num: "<<ie_num<<endl;
		cout<<"if-elseif-else num: "<<iee_num<<endl;
	}
}
